package main

/*
Factory Method

Паттерн Фабричный метод является порождающим шаблоном проектирования,
который предоставляет интерфейс для создания экземпляров некоторого класса (типа),
но оставляет подклассам (дочерним типам) возможность изменять тип создаваемых объектов.

Это способствует инкапсуляции создания объектов, делая систему более гибкой и легкой для расширения.
Принцип паттерна заключается в том, что базовый тип имеет абстрактный метод, называемый фабричным методом,
который дочерние типы должны реализовать. Этот метод используется для создания конкретных экземпляров объектов,
связанных с базовым типом. Таким образом, решение о том, какой именно объект создавать, делегируется дочерним типам.

Преимущества использования Фабричного метода включают в себя возможность расширения
и переопределения создания объектов без изменения клиентского кода. Это позволяет легко добавлять новые типы,
расширяя функциональность системы. Клиентский код взаимодействует с объектами через интерфейс базового класса,
что делает его независимым от конкретных реализаций, которые создаются.

Этот паттерн особенно полезен, когда в процессе выполнения программы нельзя заранее определить тип создаваемого объекта
или когда необходимо делегировать ответственность за создание объекта дочерним типам. Он способствует достижению гибкости
и поддерживает принцип DIP "программирование на уровне интерфейса, а не на уровне реализации".
В целом, паттерн Фабричный метод способствует созданию расширяемых и легко поддерживаемых систем.
*/

import (
	p "06_factory_method/pattern"
	"fmt"
)

func main() {
	gun1, err := p.GetGun("laser")
	if err != nil {
		fmt.Println(err)
		return
	}
	gun2, err := p.GetGun("minigun")
	if err != nil {
		fmt.Println(err)
		return
	}

	printDetails(gun1)
	printDetails(gun2)
}
func printDetails(g p.IGun) {
	fmt.Printf("Gun: %s\n", g.GetName())
	fmt.Printf("Power: %d", g.GetDamage())
	g.Shoot()
}
