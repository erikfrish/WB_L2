package main

/*
Strategy

Паттерн "Стратегия" относится к поведенческим паттернам проектирования и предоставляет возможность
определить семейство алгоритмов, инкапсулировать каждый из них и обеспечить их взаимозаменяемость.
Это позволяет изменять алгоритмы независимо от клиентов, которые их используют.
Паттерн "Стратегия" обеспечивает гибкость и расширяемость системы, так как позволяет добавлять новые алгоритмы
или изменять существующие без изменения кода клиента.


В данном примере реализован паттерн "Стратегия" для обработки платежей в воображаемом интернет-магазине.
Есть интерфейс PaymentStrategy, который определяет метод Pay.
Два кастомных типа -- CreditCardPayment и PayPalPayment -- представляют конкретные стратегии оплаты.

ShoppingCart представляет контекст, который использует стратегию оплаты.
Метод SetPaymentStrategy позволяет динамически изменять стратегию оплаты,
а метод ProcessPayment использует текущую стратегию для проведения платежа.

В main функции создается объект ShoppingCart, устанавливается стратегия оплаты с помощью кредитной карты,
и производятся оплаты с использованием обеих стратегий.
Это демонстрирует гибкость паттерна, позволяя системе динамически переключаться
между различными стратегиями оплаты без изменения самой логики обработки платежей.

*/

import (
	p "07_strategy/pattern"
	"fmt"
)

func main() {
	// Создаем объект корзины покупок
	shoppingCart := &p.ShoppingCart{}

	// Устанавливаем стратегию оплаты с помощью кредитной карты
	shoppingCart.SetPaymentStrategy(&p.CreditCardPayment{})
	fmt.Println(shoppingCart.ProcessPayment(100.50))

	// Меняем стратегию оплаты на PayPal
	shoppingCart.SetPaymentStrategy(&p.PayPalPayment{})
	fmt.Println(shoppingCart.ProcessPayment(75.25))
}
